user name	algumin
email		mr.algumin@gmail.com
password	Transformator11!

git add index.html			гіт почне слідкувати за цим файлом (включить його доможливості комітування)
git add -A					гіт почне слудкувати за всіми файлами в значенні "Untracted" (можна додати всі зразу)
git add .					такий запис також дозволяє додати всі нові або змінені файли до можливості коміту
git status 					гіт покаже нам 2 списки: untracted (якшо такий є);
													 changes to be commited (список файлів, які вже внесенні для слідкування)
git rm --cached <file>		відміняє комінду add для окремих файлів або для всіх (-A)
cls							камада очищає вікно консолі
ls							команда показує папку, в якій ми зараз є, і вміст папки
cd vasyl					команда перейте в папку василь
cd ..						команда перейде на крок вверх по ієрархії
del							видалить файл/папку
 							
git commit -m "commit_name"	роботить так звану фіксовану точку (приготовлює пакет змін файлів, який можна буде запушати на GIT-hub)
							команда -m "" дозволяє нам присвоїти імя для даної точка в історії комітів
.gitignore					це імя файлу, який ствоюється в кореневій папці проекту. це текстовий документ, в якому в список записуються 
							всі файли, небажані для коміту, які не стосуються тіла проекту, а вживаюся для розробки. При цьому
							потрібна додавати сам файл .gitignore, щоби гіт знав про існування такого файлу. Можна ігнорувати також 
							цілі папки. Запис для ігноруванння папок буде таким: /<folder name>
git branch					основна команда для гілок в гіті. Так можна глянути кількисть гілок в нащому репозиторії і поревірити,
							в яка з гілок є активною зараз.
git branch new				команда створить нову гілку з назвою "new"

git branch -D new			так можна видалити нашу гілку "new" командою "-D"
git checkout new			так можна переключитися на гілку "new" з іншої гілки
git checkout -b new1		такий скорочений запис для того, щоби, сидячи на одній гілці, створити іншу і пересісти на на цю іншу.
							параметр "-b" означає
git checkout new			переключить нас на гілку "new"
git merge new1				таким записом, сидячи на гілці "new" ми обєднуєм 2 гілки ("new" i "new1") так, шо всі файли з "new1",
							яких не було в "new" добавляться в "new".
git branch -M main			переіменовує імя гілки

git config --global user.name			ця команда виведе догін, під яким ми зараз комітимо (працюємо)
git config --global user.name "oleg"	якшо в кінці в лапках дописати імя, то так можна перейти під іншого користувача для гіт
git config --global user.email 			то саме робиться для імейла


							
							****************************************
git init	команда, яка вказує на конкретну папку (каже гіту слідкувати за цією папкою)
		якшо все ок, то після такої команди має зявитися приххована папка в папці з проектом

	далі треба настроїти репозиторій гіта. шоби знати хто які зміни вносив, треба представитися (імя та імейл наприклад)
git config --local (--global) user.name "Vasyl" (user.email example@gamil.com)
	є 3 стани програми гіт:
		1) коли файли просто створені і просто лежать в проекті
		2) коли гіт слідкує за якимсь конкретними файламию прицьому файли попадають в так званий "індекс"
		3) коли гіт створив контрольну точку, до якої ми сожемо колись вернутися і подивитися, які були зміни, як працював
		проект на данійй точці
для цього треба прописати таку команду:
git status	 
	no commits yet - жодної контрольної точки не створено 
	untracket files: - були створені такі файли. гіт поки за ними не слідкує. вони будуть червоного кольору.
		щоби додати всі ці червоні нові файли до репозиторію, треба ввести 
git add -A, де "-А" означає, шо ми хочемо додати всі файли
		якшо після цього пропистати git status знову, то червоні файли мають стати зеленими, значить все ок
	щоби перевести всі ці зелені файли в 3-тій стан, треба ввести команду
git commit -a -m"first commit"  (або замість -А можна просто написати імя файла, або можна написати *.css *.html....
					-m"...."   -  короткий меседж, шоби пояснити, шо ми робили на цьому етапі)
git log 	так можна подивитися на всі коміти (контрольні точки), їх історію і деталі

git clone 	так сможна витягти проект з GITHUBE 	(git clone (copy link from the site) (name of created folder))
git push			pusshing45435

git pull
